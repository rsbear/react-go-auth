{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const AuthsDocument = gql`\n    query Auths {\n  auths {\n    email\n    secret\n  }\n}\n    `;\n/**\n * __useAuthsQuery__\n *\n * To run a query within a React component, call `useAuthsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAuthsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AuthsDocument, baseOptions);\n}\nexport function useAuthsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AuthsDocument, baseOptions);\n}\nexport const CreateLoginAuthDocument = gql`\n    mutation CreateLoginAuth($email: String!) {\n  createLoginAuth(email: $email) {\n    success\n    message\n  }\n}\n    `;\n\n/**\n * __useCreateLoginAuthMutation__\n *\n * To run a mutation, you first call `useCreateLoginAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateLoginAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createLoginAuthMutation, { data, loading, error }] = useCreateLoginAuthMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useCreateLoginAuthMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreateLoginAuthDocument, baseOptions);\n}\nexport const SignupDocument = gql`\n    mutation Signup($input: NewUser!) {\n  signup(input: $input) {\n    username\n    email\n  }\n}\n    `;\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignupDocument, baseOptions);\n}\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    email\n    username\n  }\n}\n    `;\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UsersDocument, baseOptions);\n}\nexport function useUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UsersDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/rsbear/dev/dockertest/webapp/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","AuthsDocument","useAuthsQuery","baseOptions","useQuery","useAuthsLazyQuery","useLazyQuery","CreateLoginAuthDocument","useCreateLoginAuthMutation","useMutation","SignupDocument","useSignupMutation","UsersDocument","useUsersQuery","useUsersLazyQuery"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AA2IA,OAAO,MAAMC,aAAa,GAAGF,GAAI;;;;;;;KAA1B;AASP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASG,aAAT,CAAuBC,WAAvB,EAAyG;AACxG,SAAOH,gBAAgB,CAACI,QAAjB,CAA2DH,aAA3D,EAA0EE,WAA1E,CAAP;AACD;AACP,OAAO,SAASE,iBAAT,CAA2BF,WAA3B,EAAiH;AAC9G,SAAOH,gBAAgB,CAACM,YAAjB,CAA+DL,aAA/D,EAA8EE,WAA9E,CAAP;AACD;AAIT,OAAO,MAAMI,uBAAuB,GAAGR,GAAI;;;;;;;KAApC;;AAUP;;;;;;;;;;;;;;;;;AAiBA,OAAO,SAASS,0BAAT,CAAoCL,WAApC,EAAmJ;AAClJ,SAAOH,gBAAgB,CAACS,WAAjB,CAAwFF,uBAAxF,EAAiHJ,WAAjH,CAAP;AACD;AAIP,OAAO,MAAMO,cAAc,GAAGX,GAAI;;;;;;;KAA3B;;AAUP;;;;;;;;;;;;;;;;;AAiBA,OAAO,SAASY,iBAAT,CAA2BR,WAA3B,EAAwH;AACvH,SAAOH,gBAAgB,CAACS,WAAjB,CAAsEC,cAAtE,EAAsFP,WAAtF,CAAP;AACD;AAIP,OAAO,MAAMS,aAAa,GAAGb,GAAI;;;;;;;KAA1B;AASP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASc,aAAT,CAAuBV,WAAvB,EAAyG;AACxG,SAAOH,gBAAgB,CAACI,QAAjB,CAA2DQ,aAA3D,EAA0ET,WAA1E,CAAP;AACD;AACP,OAAO,SAASW,iBAAT,CAA2BX,WAA3B,EAAiH;AAC9G,SAAOH,gBAAgB,CAACM,YAAjB,CAA+DM,aAA/D,EAA8ET,WAA9E,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Map: any,\n  Any: any,\n  Upload: any,\n  Time: any,\n};\n\n\nexport type Auth = {\n   __typename?: 'Auth',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  secret: Scalars['String'],\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  createLoginAuth: Response,\n  deleteAuth: Response,\n  deleteUser: Response,\n  login: Response,\n  signup?: Maybe<User>,\n};\n\n\nexport type MutationCreateLoginAuthArgs = {\n  email: Scalars['String']\n};\n\n\nexport type MutationDeleteAuthArgs = {\n  id: Scalars['Int']\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'],\n  secret: Scalars['String']\n};\n\n\nexport type MutationSignupArgs = {\n  input: NewUser\n};\n\nexport type NewAuth = {\n   __typename?: 'NewAuth',\n  email: Scalars['String'],\n};\n\nexport type NewUser = {\n  email: Scalars['String'],\n  username: Scalars['String'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  auths?: Maybe<Array<Maybe<Auth>>>,\n  users?: Maybe<Array<Maybe<User>>>,\n};\n\nexport type Response = {\n   __typename?: 'Response',\n  success: Scalars['Boolean'],\n  message?: Maybe<Scalars['String']>,\n};\n\n\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  username: Scalars['String'],\n};\n\nexport type AuthsQueryVariables = {};\n\n\nexport type AuthsQuery = (\n  { __typename?: 'Query' }\n  & { auths: Maybe<Array<Maybe<(\n    { __typename?: 'Auth' }\n    & Pick<Auth, 'email' | 'secret'>\n  )>>> }\n);\n\nexport type CreateLoginAuthMutationVariables = {\n  email: Scalars['String']\n};\n\n\nexport type CreateLoginAuthMutation = (\n  { __typename?: 'Mutation' }\n  & { createLoginAuth: (\n    { __typename?: 'Response' }\n    & Pick<Response, 'success' | 'message'>\n  ) }\n);\n\nexport type SignupMutationVariables = {\n  input: NewUser\n};\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'username' | 'email'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Maybe<Array<Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'username'>\n  )>>> }\n);\n\n\nexport const AuthsDocument = gql`\n    query Auths {\n  auths {\n    email\n    secret\n  }\n}\n    `;\n\n/**\n * __useAuthsQuery__\n *\n * To run a query within a React component, call `useAuthsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAuthsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AuthsQuery, AuthsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AuthsQuery, AuthsQueryVariables>(AuthsDocument, baseOptions);\n      }\nexport function useAuthsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AuthsQuery, AuthsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AuthsQuery, AuthsQueryVariables>(AuthsDocument, baseOptions);\n        }\nexport type AuthsQueryHookResult = ReturnType<typeof useAuthsQuery>;\nexport type AuthsLazyQueryHookResult = ReturnType<typeof useAuthsLazyQuery>;\nexport type AuthsQueryResult = ApolloReactCommon.QueryResult<AuthsQuery, AuthsQueryVariables>;\nexport const CreateLoginAuthDocument = gql`\n    mutation CreateLoginAuth($email: String!) {\n  createLoginAuth(email: $email) {\n    success\n    message\n  }\n}\n    `;\nexport type CreateLoginAuthMutationFn = ApolloReactCommon.MutationFunction<CreateLoginAuthMutation, CreateLoginAuthMutationVariables>;\n\n/**\n * __useCreateLoginAuthMutation__\n *\n * To run a mutation, you first call `useCreateLoginAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateLoginAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createLoginAuthMutation, { data, loading, error }] = useCreateLoginAuthMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useCreateLoginAuthMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateLoginAuthMutation, CreateLoginAuthMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateLoginAuthMutation, CreateLoginAuthMutationVariables>(CreateLoginAuthDocument, baseOptions);\n      }\nexport type CreateLoginAuthMutationHookResult = ReturnType<typeof useCreateLoginAuthMutation>;\nexport type CreateLoginAuthMutationResult = ApolloReactCommon.MutationResult<CreateLoginAuthMutation>;\nexport type CreateLoginAuthMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateLoginAuthMutation, CreateLoginAuthMutationVariables>;\nexport const SignupDocument = gql`\n    mutation Signup($input: NewUser!) {\n  signup(input: $input) {\n    username\n    email\n  }\n}\n    `;\nexport type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    email\n    username\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;"]},"metadata":{},"sourceType":"module"}