{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function (initialValues) {\n  const {\n    0: values,\n    1: setValues\n  } = useState(initialValues);\n\n  const handleChange = e => {\n    setValues(_objectSpread({}, values, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return [values, handleChange];\n}","map":{"version":3,"sources":["/Users/rsbear/dev/dockertest/webapp/hooks/useForm.ts"],"names":["useState","initialValues","values","setValues","handleChange","e","target","name","value"],"mappings":";;;;;;AAAA,SAAgBA,QAAhB,QAAgC,OAAhC;AAEA,eAAe,UAAUC,aAAV,EAAyB;AACtC,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBH,QAAQ,CAACC,aAAD,CAApC;;AAEA,QAAMG,YAAY,GAAGC,CAAC,IAAI;AACxBF,IAAAA,SAAS,mBAAMD,MAAN;AAAc,OAACG,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAxC,OAAT;AACD,GAFD;;AAIA,SAAO,CAACN,MAAD,EAASE,YAAT,CAAP;AACD","sourcesContent":["import React, { useState } from 'react'\n\nexport default function (initialValues) {\n  const [values, setValues] = useState(initialValues)\n\n  const handleChange = e => {\n    setValues({ ...values, [e.target.name]: e.target.value })\n  }\n\n  return [values, handleChange]\n}"]},"metadata":{},"sourceType":"module"}