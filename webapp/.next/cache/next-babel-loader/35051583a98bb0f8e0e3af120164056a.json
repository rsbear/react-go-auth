{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nexport default function (initialValues) {\n  var _useState = useState(initialValues),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var handleChange = function handleChange(e) {\n    setValues(_objectSpread({}, values, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  return [values, handleChange];\n}","map":{"version":3,"sources":["/Users/rsbear/dev/dockertest/webapp/hooks/useForm.ts"],"names":["useState","initialValues","values","setValues","handleChange","e","target","name","value"],"mappings":";;;;;;;;;;;;AAAA,SAAgBA,QAAhB,QAAgC,OAAhC;AAEA,eAAe,UAAUC,aAAV,EAAyB;AAAA,kBACVD,QAAQ,CAACC,aAAD,CADE;AAAA,MAC/BC,MAD+B;AAAA,MACvBC,SADuB;;AAGtC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AACxBF,IAAAA,SAAS,mBAAMD,MAAN,sBAAeG,CAAC,CAACC,MAAF,CAASC,IAAxB,EAA+BF,CAAC,CAACC,MAAF,CAASE,KAAxC,GAAT;AACD,GAFD;;AAIA,SAAO,CAACN,MAAD,EAASE,YAAT,CAAP;AACD","sourcesContent":["import React, { useState } from 'react'\n\nexport default function (initialValues) {\n  const [values, setValues] = useState(initialValues)\n\n  const handleChange = e => {\n    setValues({ ...values, [e.target.name]: e.target.value })\n  }\n\n  return [values, handleChange]\n}"]},"metadata":{},"sourceType":"module"}