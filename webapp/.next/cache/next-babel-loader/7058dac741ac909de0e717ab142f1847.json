{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/rsbear/dev/dockertest/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { getAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    // if (!isServer() && !getAccessToken()) {\n    //   setAccessToken(serverAccessToken);\n    // }\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  };\n\n  var fakevar = \"\";\n\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, serverAccessToken, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n              serverAccessToken = \"\"; // if (isServer()) {\n              //   const cookies = cookie.parse(\n              //     req.headers.cookie ? req.headers.cookie : \"\"\n              //   );\n              //   if (cookies.rfs) {\n              //     const response = await fetch(\"http://localhost:8080/refresh_token\", {\n              //       method: \"POST\",\n              //       credentials: \"include\",\n              //       headers: {\n              //         cookie: \"rfs=\" + cookies.rfs\n              //       }\n              //     });\n              //     const data = await response.json();\n              //     serverAccessToken = data.accessToken;\n              //   }\n              // }\n              // Run all GraphQL queries in the component tree\n              // and extract the resulting data\n\n              apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              _context.t0 = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 9:\n              _context.t0 = {};\n\n            case 10:\n              pageProps = _context.t0;\n\n              if (!false) {\n                _context.next = 28;\n                break;\n              }\n\n              if (!(res && res.finished)) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 14:\n              if (!ssr) {\n                _context.next = 27;\n                break;\n              }\n\n              _context.prev = 15;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n            case 18:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                apolloClient: apolloClient,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 104\n                },\n                __self: this\n              })));\n\n            case 22:\n              _context.next = 27;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t1 = _context[\"catch\"](15);\n              console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n            case 27:\n              Head.rewind();\n\n            case 28:\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState,\n                serverAccessToken: serverAccessToken\n              }));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[15, 24]]);\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n\nfunction initApolloClient(initState, serverAccessToken) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var uploadLink = createUploadLink({\n    uri: \"http://localhost:8080/graphql\",\n    credentials: \"include\",\n    fetch: fetch // fetchOptions\n\n  }); // const refreshLink = new TokenRefreshLink({\n  //   accessTokenField: \"accessToken\",\n  //   isTokenValidOrUndefined: () => {\n  //     const token = getAccessToken();\n  //     if (!token) {\n  //       return true;\n  //     }\n  //     try {\n  //       const { exp } = jwtDecode(token);\n  //       if (Date.now() >= exp * 1000) {\n  //         return false;\n  //       } else {\n  //         return true;\n  //       }\n  //     } catch {\n  //       return false;\n  //     }\n  //   },\n  //   fetchAccessToken: () => {\n  //     return fetch(\"http://localhost:8080/refresh_token\", {\n  //       method: \"POST\",\n  //       credentials: \"include\"\n  //     });\n  //   },\n  //   handleFetch: accessToken => {\n  //     setAccessToken(accessToken);\n  //   },\n  //   handleError: err => {\n  //     console.warn(\"Your refresh token is invalid. Try to relogin\");\n  //     console.error(err);\n  //   }\n  // });\n\n  var authLink = setContext(function (_request, _ref4) {\n    var headers = _ref4.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  var errorLink = onError(function (_ref5) {\n    var graphQLErrors = _ref5.graphQLErrors,\n        networkError = _ref5.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([// refreshLink,\n    authLink, errorLink, uploadLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/rsbear/dev/dockertest/webapp/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","setContext","fetch","createUploadLink","getAccessToken","onError","ApolloLink","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","fakevar","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","uploadLink","uri","credentials","authLink","_request","headers","token","authorization","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    // if (!isServer() && !getAccessToken()) {\n    //   setAccessToken(serverAccessToken);\n    // }\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n\n  let fakevar = \"\";\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      let serverAccessToken = \"\";\n\n      // if (isServer()) {\n      //   const cookies = cookie.parse(\n      //     req.headers.cookie ? req.headers.cookie : \"\"\n      //   );\n      //   if (cookies.rfs) {\n      //     const response = await fetch(\"http://localhost:8080/refresh_token\", {\n      //       method: \"POST\",\n      //       credentials: \"include\",\n      //       headers: {\n      //         cookie: \"rfs=\" + cookies.rfs\n      //       }\n      //     });\n      //     const data = await response.json();\n      //     serverAccessToken = data.accessToken;\n      //   }\n      // }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n        {},\n        serverAccessToken\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        Head.rewind();\n      }\n\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n        serverAccessToken\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\n  const uploadLink = createUploadLink({\n    uri: \"http://localhost:8080/graphql\",\n    credentials: \"include\",\n    fetch\n    // fetchOptions\n  });\n\n  // const refreshLink = new TokenRefreshLink({\n  //   accessTokenField: \"accessToken\",\n  //   isTokenValidOrUndefined: () => {\n  //     const token = getAccessToken();\n\n  //     if (!token) {\n  //       return true;\n  //     }\n\n  //     try {\n  //       const { exp } = jwtDecode(token);\n  //       if (Date.now() >= exp * 1000) {\n  //         return false;\n  //       } else {\n  //         return true;\n  //       }\n  //     } catch {\n  //       return false;\n  //     }\n  //   },\n  //   fetchAccessToken: () => {\n  //     return fetch(\"http://localhost:8080/refresh_token\", {\n  //       method: \"POST\",\n  //       credentials: \"include\"\n  //     });\n  //   },\n  //   handleFetch: accessToken => {\n  //     setAccessToken(accessToken);\n  //   },\n  //   handleError: err => {\n  //     console.warn(\"Your refresh token is invalid. Try to relogin\");\n  //     console.error(err);\n  //   }\n  // });\n\n  const authLink = setContext((_request, { headers }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `bearer ${token}` : \"\"\n      }\n    };\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([\n      // refreshLink,\n      authLink,\n      errorLink,\n      uploadLink\n    ]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}