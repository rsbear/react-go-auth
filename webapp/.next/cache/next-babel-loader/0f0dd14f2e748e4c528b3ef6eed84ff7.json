{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { getAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    // if (!isServer() && !getAccessToken()) {\n    //   setAccessToken(serverAccessToken);\n    // }\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client\n    }));\n  };\n\n  var fakevar = \"\";\n\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, serverAccessToken, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n              serverAccessToken = \"\"; // if (isServer()) {\n              //   const cookies = cookie.parse(\n              //     req.headers.cookie ? req.headers.cookie : \"\"\n              //   );\n              //   if (cookies.rfs) {\n              //     const response = await fetch(\"http://localhost:8080/refresh_token\", {\n              //       method: \"POST\",\n              //       credentials: \"include\",\n              //       headers: {\n              //         cookie: \"rfs=\" + cookies.rfs\n              //       }\n              //     });\n              //     const data = await response.json();\n              //     serverAccessToken = data.accessToken;\n              //   }\n              // }\n              // Run all GraphQL queries in the component tree\n              // and extract the resulting data\n\n              apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 6:\n              _context.t0 = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 9:\n              _context.t0 = {};\n\n            case 10:\n              pageProps = _context.t0;\n\n              if (!false) {\n                _context.next = 28;\n                break;\n              }\n\n              if (!(res && res.finished)) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 14:\n              if (!ssr) {\n                _context.next = 27;\n                break;\n              }\n\n              _context.prev = 15;\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n            case 18:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                apolloClient: apolloClient\n              })));\n\n            case 22:\n              _context.next = 27;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t1 = _context[\"catch\"](15);\n              console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n            case 27:\n              Head.rewind();\n\n            case 28:\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState,\n                serverAccessToken: serverAccessToken\n              }));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[15, 24]]);\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n\nfunction initApolloClient(initState, serverAccessToken) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var uploadLink = createUploadLink({\n    uri: \"http://localhost:8080/graphql\",\n    credentials: \"include\",\n    fetch: fetch // fetchOptions\n\n  }); // const refreshLink = new TokenRefreshLink({\n  //   accessTokenField: \"accessToken\",\n  //   isTokenValidOrUndefined: () => {\n  //     const token = getAccessToken();\n  //     if (!token) {\n  //       return true;\n  //     }\n  //     try {\n  //       const { exp } = jwtDecode(token);\n  //       if (Date.now() >= exp * 1000) {\n  //         return false;\n  //       } else {\n  //         return true;\n  //       }\n  //     } catch {\n  //       return false;\n  //     }\n  //   },\n  //   fetchAccessToken: () => {\n  //     return fetch(\"http://localhost:8080/refresh_token\", {\n  //       method: \"POST\",\n  //       credentials: \"include\"\n  //     });\n  //   },\n  //   handleFetch: accessToken => {\n  //     setAccessToken(accessToken);\n  //   },\n  //   handleError: err => {\n  //     console.warn(\"Your refresh token is invalid. Try to relogin\");\n  //     console.error(err);\n  //   }\n  // });\n\n  var authLink = setContext(function (_request, _ref4) {\n    var headers = _ref4.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  var errorLink = onError(function (_ref5) {\n    var graphQLErrors = _ref5.graphQLErrors,\n        networkError = _ref5.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([// refreshLink,\n    authLink, errorLink, uploadLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}