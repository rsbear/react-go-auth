{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/rsbear/dev/dockertest/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  };\n\n  var fakevar = \"\";\n\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, serverAccessToken, cookies, response, data, apolloClient, pageProps, _ref3, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n              serverAccessToken = \"\";\n\n              if (!isServer()) {\n                _context.next = 12;\n                break;\n              }\n\n              cookies = cookie.parse(req.headers.cookie ? req.headers.cookie : \"\");\n\n              if (!cookies.rfs) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/refresh_token\", {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                  cookie: \"rfs=\" + cookies.rfs\n                }\n              }));\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 10:\n              data = _context.sent;\n              serverAccessToken = data.accessToken;\n\n            case 12:\n              // Run all GraphQL queries in the component tree\n              // and extract the resulting data\n              apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 16:\n              _context.t0 = _context.sent;\n              _context.next = 20;\n              break;\n\n            case 19:\n              _context.t0 = {};\n\n            case 20:\n              pageProps = _context.t0;\n\n              if (!false) {\n                _context.next = 38;\n                break;\n              }\n\n              if (!(res && res.finished)) {\n                _context.next = 24;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 24:\n              if (!ssr) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.prev = 25;\n              _context.next = 28;\n              return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n            case 28:\n              _ref3 = _context.sent;\n              getDataFromTree = _ref3.getDataFromTree;\n              _context.next = 32;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                apolloClient: apolloClient,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 104\n                },\n                __self: this\n              })));\n\n            case 32:\n              _context.next = 37;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t1 = _context[\"catch\"](25);\n              console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n            case 37:\n              Head.rewind();\n\n            case 38:\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState,\n                serverAccessToken: serverAccessToken\n              }));\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[25, 34]]);\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n\nfunction initApolloClient(initState, serverAccessToken) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var uploadLink = createUploadLink({\n    uri: \"http://localhost:8080/graphql/\",\n    credentials: \"include\",\n    fetch: fetch // fetchOptions\n\n  });\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (_Date$now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      return fetch(\"http://localhost:8080/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n  var authLink = setContext(function (_request, _ref4) {\n    var headers = _ref4.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  var errorLink = onError(function (_ref5) {\n    var graphQLErrors = _ref5.graphQLErrors,\n        networkError = _ref5.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, uploadLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/rsbear/dev/dockertest/webapp/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","setContext","fetch","TokenRefreshLink","createUploadLink","jwtDecode","getAccessToken","setAccessToken","onError","ApolloLink","cookie","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","fakevar","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","cookies","parse","headers","rfs","method","credentials","response","json","data","accessToken","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","uploadLink","uri","refreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","fetchAccessToken","handleFetch","handleError","err","authLink","_request","authorization","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n\n  let fakevar = \"\";\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      let serverAccessToken = \"\";\n\n      if (isServer()) {\n        const cookies = cookie.parse(\n          req.headers.cookie ? req.headers.cookie : \"\"\n        );\n        if (cookies.rfs) {\n          const response = await fetch(\"http://localhost:8080/refresh_token\", {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n              cookie: \"rfs=\" + cookies.rfs\n            }\n          });\n          const data = await response.json();\n          serverAccessToken = data.accessToken;\n        }\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n        {},\n        serverAccessToken\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        Head.rewind();\n      }\n\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n        serverAccessToken\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\n  const uploadLink = createUploadLink({\n    uri: \"http://localhost:8080/graphql/\",\n    credentials: \"include\",\n    fetch\n    // fetchOptions\n  });\n\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const { exp } = jwtDecode(token);\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(\"http://localhost:8080/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n\n  const authLink = setContext((_request, { headers }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `bearer ${token}` : \"\"\n      }\n    };\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, uploadLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}