{"ast":null,"code":"var _jsxFileName = \"/Users/rsbear/dev/dockertest/webapp/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\n\nconst isServer = () => true;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      serverAccessToken,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    // if (!isServer() && !getAccessToken()) {\n    //   setAccessToken(serverAccessToken);\n    // }\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  };\n\n  let fakevar = \"\";\n\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      let serverAccessToken = \"\"; // if (isServer()) {\n      //   const cookies = cookie.parse(\n      //     req.headers.cookie ? req.headers.cookie : \"\"\n      //   );\n      //   if (cookies.rfs) {\n      //     const response = await fetch(\"http://localhost:8080/refresh_token\", {\n      //       method: \"POST\",\n      //       credentials: \"include\",\n      //       headers: {\n      //         cookie: \"rfs=\" + cookies.rfs\n      //       }\n      //     });\n      //     const data = await response.json();\n      //     serverAccessToken = data.accessToken;\n      //   }\n      // }\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      const apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {}; // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              apolloClient: apolloClient,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            }));\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        Head.rewind();\n      }\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState,\n        serverAccessToken\n      });\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n\nfunction initApolloClient(initState, serverAccessToken) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient(initialState = {}, serverAccessToken) {\n  const httpLink = new HttpLink({\n    uri: \"http://localhost:8080/graphql\",\n    credentials: \"include\",\n    fetch\n  }); // const uploadLink = createUploadLink({\n  //   uri: \"http://localhost:8080/graphql\",\n  //   credentials: \"include\",\n  //   fetch\n  //   // fetchOptions\n  // });\n  // const refreshLink = new TokenRefreshLink({\n  //   accessTokenField: \"accessToken\",\n  //   isTokenValidOrUndefined: () => {\n  //     const token = getAccessToken();\n  //     if (!token) {\n  //       return true;\n  //     }\n  //     try {\n  //       const { exp } = jwtDecode(token);\n  //       if (Date.now() >= exp * 1000) {\n  //         return false;\n  //       } else {\n  //         return true;\n  //       }\n  //     } catch {\n  //       return false;\n  //     }\n  //   },\n  //   fetchAccessToken: () => {\n  //     return fetch(\"http://localhost:8080/refresh_token\", {\n  //       method: \"POST\",\n  //       credentials: \"include\"\n  //     });\n  //   },\n  //   handleFetch: accessToken => {\n  //     setAccessToken(accessToken);\n  //   },\n  //   handleError: err => {\n  //     console.warn(\"Your refresh token is invalid. Try to relogin\");\n  //     console.error(err);\n  //   }\n  // });\n  // const authLink = setContext((_request, { headers }) => {\n  //   const token = isServer() ? serverAccessToken : getAccessToken();\n  //   return {\n  //     headers: {\n  //       ...headers,\n  //       authorization: token ? `bearer ${token}` : \"\"\n  //     }\n  //   };\n  // });\n\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([// refreshLink,\n    // authLink,\n    errorLink, httpLink // uploadLink\n    ]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/rsbear/dev/dockertest/webapp/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","HttpLink","fetch","onError","ApolloLink","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","fakevar","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","httpLink","uri","credentials","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { setContext } from \"apollo-link-context\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    // if (!isServer() && !getAccessToken()) {\n    //   setAccessToken(serverAccessToken);\n    // }\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n\n  let fakevar = \"\";\n  if (fakevar !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      let serverAccessToken = \"\";\n\n      // if (isServer()) {\n      //   const cookies = cookie.parse(\n      //     req.headers.cookie ? req.headers.cookie : \"\"\n      //   );\n      //   if (cookies.rfs) {\n      //     const response = await fetch(\"http://localhost:8080/refresh_token\", {\n      //       method: \"POST\",\n      //       credentials: \"include\",\n      //       headers: {\n      //         cookie: \"rfs=\" + cookies.rfs\n      //       }\n      //     });\n      //     const data = await response.json();\n      //     serverAccessToken = data.accessToken;\n      //   }\n      // }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n        {},\n        serverAccessToken\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        Head.rewind();\n      }\n\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n        serverAccessToken\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\n  const httpLink = new HttpLink({\n    uri: \"http://localhost:8080/graphql\",\n    credentials: \"include\",\n    fetch\n  });\n  // const uploadLink = createUploadLink({\n  //   uri: \"http://localhost:8080/graphql\",\n  //   credentials: \"include\",\n  //   fetch\n  //   // fetchOptions\n  // });\n\n  // const refreshLink = new TokenRefreshLink({\n  //   accessTokenField: \"accessToken\",\n  //   isTokenValidOrUndefined: () => {\n  //     const token = getAccessToken();\n\n  //     if (!token) {\n  //       return true;\n  //     }\n\n  //     try {\n  //       const { exp } = jwtDecode(token);\n  //       if (Date.now() >= exp * 1000) {\n  //         return false;\n  //       } else {\n  //         return true;\n  //       }\n  //     } catch {\n  //       return false;\n  //     }\n  //   },\n  //   fetchAccessToken: () => {\n  //     return fetch(\"http://localhost:8080/refresh_token\", {\n  //       method: \"POST\",\n  //       credentials: \"include\"\n  //     });\n  //   },\n  //   handleFetch: accessToken => {\n  //     setAccessToken(accessToken);\n  //   },\n  //   handleError: err => {\n  //     console.warn(\"Your refresh token is invalid. Try to relogin\");\n  //     console.error(err);\n  //   }\n  // });\n\n  // const authLink = setContext((_request, { headers }) => {\n  //   const token = isServer() ? serverAccessToken : getAccessToken();\n  //   return {\n  //     headers: {\n  //       ...headers,\n  //       authorization: token ? `bearer ${token}` : \"\"\n  //     }\n  //   };\n  // });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([\n      // refreshLink,\n      // authLink,\n      errorLink,\n      httpLink\n      // uploadLink\n    ]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}