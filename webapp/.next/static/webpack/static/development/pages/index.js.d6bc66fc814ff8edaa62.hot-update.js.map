{"version":3,"file":"static/webpack/static/development/pages/index.js.d6bc66fc814ff8edaa62.hot-update.js","sources":["webpack:///./generated/graphql.tsx"],"sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Upload: any,\n  Any: any,\n  Map: any,\n  Time: any,\n};\n\n\nexport type Auth = {\n   __typename?: 'Auth',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  secret: Scalars['String'],\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  deleteAuth: Response,\n  deleteUser: Response,\n  signup?: Maybe<User>,\n};\n\n\nexport type MutationDeleteAuthArgs = {\n  id: Scalars['Int']\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['Int']\n};\n\n\nexport type MutationSignupArgs = {\n  input: NewUser\n};\n\nexport type NewAuth = {\n   __typename?: 'NewAuth',\n  email: Scalars['String'],\n};\n\nexport type NewUser = {\n  email: Scalars['String'],\n  username: Scalars['String'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  auths?: Maybe<Array<Maybe<Auth>>>,\n  users?: Maybe<Array<Maybe<User>>>,\n};\n\nexport type Response = {\n   __typename?: 'Response',\n  success: Scalars['Boolean'],\n  message?: Maybe<Scalars['String']>,\n};\n\n\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  username: Scalars['String'],\n};\n\nexport type AuthsQueryVariables = {};\n\n\nexport type AuthsQuery = (\n  { __typename?: 'Query' }\n  & { auths: Maybe<Array<Maybe<(\n    { __typename?: 'Auth' }\n    & Pick<Auth, 'email' | 'secret'>\n  )>>> }\n);\n\nexport type SignupMutationVariables = {\n  input: NewUser\n};\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'username' | 'email'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Maybe<Array<Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'username'>\n  )>>> }\n);\n\n\nexport const AuthsDocument = gql`\n    query Auths {\n  auths {\n    email\n    secret\n  }\n}\n    `;\n\n/**\n * __useAuthsQuery__\n *\n * To run a query within a React component, call `useAuthsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAuthsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AuthsQuery, AuthsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AuthsQuery, AuthsQueryVariables>(AuthsDocument, baseOptions);\n      }\nexport function useAuthsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AuthsQuery, AuthsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AuthsQuery, AuthsQueryVariables>(AuthsDocument, baseOptions);\n        }\nexport type AuthsQueryHookResult = ReturnType<typeof useAuthsQuery>;\nexport type AuthsLazyQueryHookResult = ReturnType<typeof useAuthsLazyQuery>;\nexport type AuthsQueryResult = ApolloReactCommon.QueryResult<AuthsQuery, AuthsQueryVariables>;\nexport const SignupDocument = gql`\n    mutation Signup($input: NewUser!) {\n  signup(input: $input) {\n    username\n    email\n  }\n}\n    `;\nexport type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    email\n    username\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAiHA;AASA;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AASA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AAIA;AASA;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}